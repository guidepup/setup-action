"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setup = void 0;
const checkVersion_1 = require("./checkVersion");
const enableAppleScriptControlSystemDefaults_1 = require("./enableAppleScriptControlSystemDefaults");
const disableSplashScreenSystemDefaults_1 = require("./disableSplashScreenSystemDefaults");
const disableDictationInputAutoEnable_1 = require("./disableDictationInputAutoEnable");
const isSipEnabled_1 = require("./isSipEnabled");
const writeDatabaseFile_1 = require("./writeDatabaseFile");
const updateTccDb_1 = require("./updateTccDb");
const isAppleScriptControlEnabled_1 = require("./isAppleScriptControlEnabled");
const askUserToControlUi_1 = require("./askUserToControlUi");
const setVoiceOverEnabledViaUi_1 = require("./setVoiceOverEnabledViaUi");
const logging_1 = require("../logging");
const errors_1 = require("../errors");
const enableDoNotDisturb_1 = require("./enableDoNotDisturb");
const record_1 = require("./record");
const isCi = process.argv.includes("--ci");
const isRecorded = process.argv.includes("--record");
async function setup() {
    const stopRecording = isRecorded
        ? (0, record_1.record)(`./recordings/macos-setup-${+new Date()}.mov`)
        : () => null;
    try {
        (0, checkVersion_1.checkVersion)();
        (0, enableAppleScriptControlSystemDefaults_1.enableAppleScriptControlSystemDefaults)();
        (0, disableSplashScreenSystemDefaults_1.disableSplashScreenSystemDefaults)();
        (0, disableDictationInputAutoEnable_1.disableDictationInputAutoEnable)();
        try {
            (0, updateTccDb_1.updateTccDb)();
        }
        catch (e) {
            if (isCi) {
                throw e;
            }
        }
        if (isCi) {
            await (0, enableDoNotDisturb_1.enableDoNotDisturb)();
        }
        if (!(0, isSipEnabled_1.isSipEnabled)()) {
            (0, writeDatabaseFile_1.writeDatabaseFile)();
            return;
        }
        if (await (0, isAppleScriptControlEnabled_1.isAppleScriptControlEnabled)()) {
            return;
        }
        if (isCi) {
            throw new Error(errors_1.ERR_MACOS_REQUIRES_MANUAL_USER_INTERACTION);
        }
        const credentials = await (0, askUserToControlUi_1.askUserToControlUi)();
        (0, logging_1.logInfo)("");
        (0, logging_1.logInfo)("Starting UI control...");
        (0, logging_1.logInfo)("Please refrain from interaction until the script has completed");
        await (0, setVoiceOverEnabledViaUi_1.setVoiceOverEnabledViaUi)(credentials);
    }
    finally {
        stopRecording();
    }
}
exports.setup = setup;
