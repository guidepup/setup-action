/**
 * Object of key code commands for the NVDA screen reader on Windows.
 *
 * References:
 *
 * - {@link https://www.nvaccess.org/files/nvda/releases/2021.2/documentation/keyCommands.html}
 * - {@link https://dequeuniversity.com/screenreaders/nvda-keyboard-shortcuts}
 */
export declare const keyCodeCommands: {
    start: {
        keyCode: import("../Key").Key;
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    stopSpeech: {
        keyCode: import("../Key").Key;
        modifiers: any[];
        description: string;
        representation: string;
    };
    pauseSpeech: {
        keyCode: import("../Key").Key;
        modifiers: any[];
        description: string;
        representation: string;
    };
    openUtilityMenu: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    toggleSpeechMode: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    startKeyboardHelp: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    stop: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    ignoreNextKeyCombination: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    toggleSleepMode: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    reportDateTime: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    reportBatteryStatus: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    reportClipboardText: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    reportCurrentFocus: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    reportTitle: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    readActiveWindow: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    reportStatusBar: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    sayAll: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    readLine: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    readCurrentSelection: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    reportTextFormatting: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    readNextSentence: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    readPreviousSentence: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveToPreviousColumn: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveToNextColumn: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveToPreviousRow: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveToNextRow: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    reportCurrentObject: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToContainingObject: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToPreviousObject: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToNextObject: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToFirstContainedObject: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToFocusObject: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    activateCurrentNavigatorObject: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToReviewPosition: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    reportReviewPosition: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToTopLineInReview: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveToPreviousLineInReview: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    reportCurrentLineInReview: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToNextLineInReview: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToBottomLineInReview: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveToPreviousWordInReview: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    reportCurrentWordInReview: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToNextWordInReview: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToStartOfLineInReview: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveToPreviousCharacterInReview: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    reportCurrentCharacterInReview: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToNextCharacterInReview: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToEndOfLineInReview: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    sayAllWithReview: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    selectThenCopyFromReviewCursor: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    selectThenCopyToReviewCursor: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToMarkedStartForCopyInReview: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    reportTextFormattingInReview: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    switchToNextReviewMode: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    switchToPreviousReviewMode: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    leftMouseClick: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    leftMouseButtonLock: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    rightMouseClick: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    rightMouseButtonLock: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveMouseToCurrentNavigatorObject: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    navigateToObjectUnderMouse: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    toggleBetweenBrowseAndFocusMode: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    exitFocusMode: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    refreshBrowseDocument: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    find: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    findNext: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    findPrevious: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    openLongDescription: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToNextHeading: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToPreviousHeading: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveToNextList: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToPreviousList: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveToNextListItem: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToPreviousListItem: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveToNextTable: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToPreviousTable: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveToNextLink: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToPreviousLink: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveToNextNonLinkedText: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToPreviousNonLinkedText: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveToNextFormField: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToPreviousFormField: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveToNextUnvisitedLink: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToPreviousUnvisitedLink: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveToNextVisitedLink: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToPreviousVisitedLink: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveToNextEditField: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToPreviousEditField: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveToNextButton: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToPreviousButton: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveToNextCheckbox: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToPreviousCheckbox: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveToNextComboBox: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToPreviousComboBox: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveToNextRadioButton: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToPreviousRadioButton: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveToNextBlockQuote: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToPreviousBlockQuote: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveToNextSeparator: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToPreviousSeparator: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveToNextFrame: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToPreviousFrame: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveToNextGraphic: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToPreviousGraphic: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveToNextLandmark: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToPreviousLandmark: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveToNextEmbeddedObject: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToPreviousEmbeddedObject: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveToNextHeadingLevel1: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToPreviousHeadingLevel1: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveToNextHeadingLevel2: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToPreviousHeadingLevel2: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveToNextHeadingLevel3: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToPreviousHeadingLevel3: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveToNextHeadingLevel4: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToPreviousHeadingLevel4: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveToNextHeadingLevel5: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToPreviousHeadingLevel5: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveToNextHeadingLevel6: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToPreviousHeadingLevel6: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveToNextAnnotation: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToPreviousAnnotation: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveToNextSpellingError: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToPreviousSpellingError: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveToStartOfContainer: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    movePastEndOfContainer: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    toggleSingleLetterNavigation: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    browseModeElementsList: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToContainingBrowseModeDocument: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    interactWithMathContent: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    openSpeechSettings: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    punctuationLevel: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    selectSynthesizer: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    audioDuckingMode: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveToNextSynthSetting: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveToPreviousSynthSetting: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    incrementCurrentSynthSetting: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    decrementCurrentSynthSetting: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    tetherBraille: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    openKeyboardSettings: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    speakTypedCharacters: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    speakTypedWords: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    speakCommandKeys: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    openMouseSettings: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    enableMouseTracking: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    reviewCursorFollowSystemFocus: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    reviewCursorFollowSystemCaret: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    openObjectPresentationSettings: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    progressBarOutput: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    reportDynamicContentChanges: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    openBrowseModeSettings: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    useScreenLayout: {
        keyCode: import("../Key").Key[];
        modifiers: any[];
        description: string;
        representation: string;
    };
    saveConfiguration: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    revertConfiguration: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    openConfigurationProfilesDialog: {
        keyCode: import("../Key").Key[];
        modifiers: import("../Key").Key[];
        description: string;
        representation: string;
    };
    moveToPrevious: {
        keyCode: import("../Key").Key;
        modifiers: any[];
        description: string;
        representation: string;
    };
    moveToNext: {
        keyCode: import("../Key").Key;
        modifiers: any[];
        description: string;
        representation: string;
    };
    readNextFocusableItem: {
        keyCode: import("../Key").Key;
        modifiers: any[];
        description: string;
        representation: string;
    };
    performDefaultActionForItem: {
        keyCode: import("../Key").Key;
        modifiers: any[];
        description: string;
        representation: string;
    };
    activate: {
        keyCode: import("../Key").Key;
        modifiers: any[];
        description: string;
        representation: string;
    };
};
